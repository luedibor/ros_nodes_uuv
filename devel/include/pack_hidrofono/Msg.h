// Generated by gencpp from file pack_hidrofono/Msg.msg
// DO NOT EDIT!


#ifndef PACK_HIDROFONO_MESSAGE_MSG_H
#define PACK_HIDROFONO_MESSAGE_MSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pack_hidrofono
{
template <class ContainerAllocator>
struct Msg_
{
  typedef Msg_<ContainerAllocator> Type;

  Msg_()
    : stamp()
    , data(0)
    , w(0.0)  {
    }
  Msg_(const ContainerAllocator& _alloc)
    : stamp()
    , data(0)
    , w(0.0)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef int32_t _data_type;
  _data_type data;

   typedef double _w_type;
  _w_type w;





  typedef boost::shared_ptr< ::pack_hidrofono::Msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pack_hidrofono::Msg_<ContainerAllocator> const> ConstPtr;

}; // struct Msg_

typedef ::pack_hidrofono::Msg_<std::allocator<void> > Msg;

typedef boost::shared_ptr< ::pack_hidrofono::Msg > MsgPtr;
typedef boost::shared_ptr< ::pack_hidrofono::Msg const> MsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pack_hidrofono::Msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pack_hidrofono::Msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pack_hidrofono::Msg_<ContainerAllocator1> & lhs, const ::pack_hidrofono::Msg_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.data == rhs.data &&
    lhs.w == rhs.w;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pack_hidrofono::Msg_<ContainerAllocator1> & lhs, const ::pack_hidrofono::Msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pack_hidrofono

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::pack_hidrofono::Msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pack_hidrofono::Msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pack_hidrofono::Msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pack_hidrofono::Msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pack_hidrofono::Msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pack_hidrofono::Msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pack_hidrofono::Msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d1a0a03e61926fba0da2daab36f5346a";
  }

  static const char* value(const ::pack_hidrofono::Msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd1a0a03e61926fbaULL;
  static const uint64_t static_value2 = 0x0da2daab36f5346aULL;
};

template<class ContainerAllocator>
struct DataType< ::pack_hidrofono::Msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pack_hidrofono/Msg";
  }

  static const char* value(const ::pack_hidrofono::Msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pack_hidrofono::Msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp\n"
"int32 data   \n"
"float64 w   \n"
;
  }

  static const char* value(const ::pack_hidrofono::Msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pack_hidrofono::Msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.data);
      stream.next(m.w);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pack_hidrofono::Msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pack_hidrofono::Msg_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "data: ";
    Printer<int32_t>::stream(s, indent + "  ", v.data);
    s << indent << "w: ";
    Printer<double>::stream(s, indent + "  ", v.w);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PACK_HIDROFONO_MESSAGE_MSG_H
